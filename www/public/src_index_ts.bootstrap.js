"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksnake_game"] = self["webpackChunksnake_game"] || []).push([["src_index_ts"],{

/***/ "../pkg/Rust_snake_game.js":
/*!*********************************!*\
  !*** ../pkg/Rust_snake_game.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Direction\": () => (/* binding */ Direction),\n/* harmony export */   \"GameStatus\": () => (/* binding */ GameStatus),\n/* harmony export */   \"World\": () => (/* binding */ World),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"initSync\": () => (/* binding */ initSync)\n/* harmony export */ });\n/* harmony import */ var _snippets_Rust_snake_game_a73e76125401b849_www_utils_rnd_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snippets/Rust_snake_game-a73e76125401b849/www/utils/rnd.js */ \"../pkg/snippets/Rust_snake_game-a73e76125401b849/www/utils/rnd.js\");\n\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n*/\nconst Direction = Object.freeze({ Up:0,\"0\":\"Up\",Right:1,\"1\":\"Right\",Down:2,\"2\":\"Down\",Left:3,\"3\":\"Left\", });\n/**\n*/\nconst GameStatus = Object.freeze({ Won:0,\"0\":\"Won\",Lost:1,\"1\":\"Lost\",Played:2,\"2\":\"Played\", });\n/**\n*/\nclass World {\n\n    static __wrap(ptr) {\n        const obj = Object.create(World.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} snake_idx\n    * @param {number} spawn_direction\n    * @returns {World}\n    */\n    static new(width, snake_idx, spawn_direction) {\n        const ret = wasm.world_new(width, snake_idx, spawn_direction);\n        return World.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.world_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    points() {\n        const ret = wasm.world_points(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    reward_cell() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_reward_cell(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    snake_head_idx() {\n        const ret = wasm.world_snake_head_idx(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    */\n    start_game() {\n        wasm.world_start_game(this.ptr);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    game_status() {\n        const ret = wasm.world_game_status(this.ptr);\n        return ret === 3 ? undefined : ret;\n    }\n    /**\n    * @returns {string}\n    */\n    game_status_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_game_status_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {number} new_direction\n    */\n    update_snake_direction(new_direction) {\n        wasm.world_update_snake_direction(this.ptr, new_direction);\n    }\n    /**\n    * @returns {number}\n    */\n    snake_length() {\n        const ret = wasm.world_snake_length(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_cells() {\n        const ret = wasm.world_snake_cells(this.ptr);\n        return ret;\n    }\n    /**\n    */\n    step() {\n        wasm.world_step(this.ptr);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_rnd_af9604b8621f61ce = function(arg0) {\n        const ret = (0,_snippets_Rust_snake_game_a73e76125401b849_www_utils_rnd_js__WEBPACK_IMPORTED_MODULE_0__.rnd)(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! Rust_snake_game_bg.wasm */ \"../pkg/Rust_snake_game_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n\n\n//# sourceURL=webpack://snake_game/../pkg/Rust_snake_game.js?");

/***/ }),

/***/ "../pkg/snippets/Rust_snake_game-a73e76125401b849/www/utils/rnd.js":
/*!*************************************************************************!*\
  !*** ../pkg/snippets/Rust_snake_game-a73e76125401b849/www/utils/rnd.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rnd\": () => (/* binding */ rnd)\n/* harmony export */ });\nfunction rnd(max) {\n  return Math.floor(Math.random() * max);\n}\n\n\n//# sourceURL=webpack://snake_game/../pkg/snippets/Rust_snake_game-a73e76125401b849/www/utils/rnd.js?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var snake_game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! snake-game */ \"../pkg/Rust_snake_game.js\");\n/* harmony import */ var _utils_rnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/rnd */ \"./utils/rnd.js\");\n\n\n// wasm.greet(\"Rudra\") can't work because wasm functions don't take a string as an argument they can\n// only work with numbers and pointers to memory\n// (async () => {\n// const wasm = await init();\n// wasm.greet(\"Rudra\");\n// })();\nvar KEYS;\n(function (KEYS) {\n    KEYS[\"ARROW_UP\"] = \"ArrowUp\";\n    KEYS[\"ARROW_DOWN\"] = \"ArrowDown\";\n    KEYS[\"ARROW_LEFT\"] = \"ArrowLeft\";\n    KEYS[\"ARROW_RIGHT\"] = \"ArrowRight\";\n    KEYS[\"KEY_W\"] = \"KeyW\";\n    KEYS[\"KEY_S\"] = \"KeyS\";\n    KEYS[\"KEY_A\"] = \"KeyA\";\n    KEYS[\"KEY_D\"] = \"KeyD\";\n})(KEYS || (KEYS = {}));\nfunction componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nconst commandStack = [];\n(0,snake_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().then((wasm) => {\n    const CELL_SIZE = 40;\n    const WORLD_WIDTH = 8;\n    const snakeSpawnDirection = snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Right;\n    const snakeSpawnIdx = (0,_utils_rnd__WEBPACK_IMPORTED_MODULE_0__.rnd)(WORLD_WIDTH * WORLD_WIDTH);\n    const world = snake_game__WEBPACK_IMPORTED_MODULE_1__.World[\"new\"](WORLD_WIDTH, snakeSpawnIdx, snakeSpawnDirection);\n    const worldWidth = world.width();\n    const points = document.getElementById(\"game-points\");\n    const gameStatus = document.getElementById(\"game-status\");\n    const gameControlBtn = (document.getElementById(\"game-control-btn\"));\n    const canvas = document.getElementById(\"snake-canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = worldWidth * CELL_SIZE;\n    canvas.height = worldWidth * CELL_SIZE;\n    gameControlBtn.addEventListener(\"click\", () => {\n        const status = world.game_status();\n        switch (status) {\n            case snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Played:\n            case snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Lost:\n            case snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Won:\n                location.reload();\n                break;\n            default:\n                gameControlBtn.textContent = \"Pause\";\n                gameControlBtn.classList.add(\"playing\");\n                world.start_game();\n                play();\n        }\n    });\n    function checkAndPushDirection(currentDirection) {\n        if (commandStack.length > 0) {\n            const lastDirection = commandStack[commandStack.length - 1];\n            if (lastDirection === currentDirection)\n                return;\n        }\n        commandStack.push(currentDirection);\n    }\n    document.addEventListener(\"keydown\", (e) => {\n        switch (e.code) {\n            case KEYS.ARROW_UP:\n            case KEYS.KEY_W:\n                checkAndPushDirection(snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Up);\n                break;\n            case KEYS.ARROW_DOWN:\n            case KEYS.KEY_S:\n                checkAndPushDirection(snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Down);\n                break;\n            case KEYS.ARROW_LEFT:\n            case KEYS.KEY_A:\n                checkAndPushDirection(snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Left);\n                break;\n            case KEYS.ARROW_RIGHT:\n            case KEYS.KEY_D:\n                checkAndPushDirection(snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Right);\n                break;\n            default:\n                break;\n        }\n    });\n    function drawWorld() {\n        ctx.beginPath();\n        for (let x = 0; x < worldWidth + 1; x++) {\n            ctx.moveTo(CELL_SIZE * x, 0);\n            ctx.lineTo(CELL_SIZE * x, worldWidth * CELL_SIZE);\n        }\n        // move to the yth rosw increasing Mat(i,j) where i=y and then move from j=0 to j= worldWidth*CELL_SIZE\n        //The move to and line to takes the (x,y) as arguement so x is denoted here to be worldWidth*CELL_SIZE\n        // The same happends for columns above where x is used to draw the grid's columns and x moves in the x directions and lines to the bottom of the grid\n        for (let y = 0; y < worldWidth + 1; y++) {\n            ctx.moveTo(0, CELL_SIZE * y);\n            ctx.lineTo(worldWidth * CELL_SIZE, CELL_SIZE * y);\n        }\n        ctx.lineWidth = 2;\n        ctx.stroke();\n    }\n    function drawReward() {\n        const rewardIdx = world.reward_cell();\n        const col = rewardIdx % worldWidth;\n        const row = Math.floor(rewardIdx / worldWidth);\n        ctx.beginPath();\n        ctx.fillStyle = \"#f00\";\n        // provide four positions a,b,c,d for the rectangle\n        ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        ctx.stroke();\n    }\n    function drawSnake() {\n        const snakeCellPtr = world.snake_cells();\n        const snakeLen = world.snake_length();\n        const snakeCells = new Uint32Array(wasm.memory.buffer, snakeCellPtr, snakeLen);\n        ctx.beginPath();\n        snakeCells\n            .filter((cellIdx, i) => !(i > 0 && cellIdx == snakeCells[0]))\n            .forEach((cellIdx, i) => {\n            const col = cellIdx % worldWidth;\n            const row = Math.floor(cellIdx / worldWidth);\n            const colorNumber = (i - 1) * 3;\n            ctx.fillStyle =\n                i === 0 ? \"#7878DB\" : rgbToHex(colorNumber, colorNumber, colorNumber);\n            // provide four positions a,b,c,d for the rectangle\n            ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        });\n        ctx.stroke();\n    }\n    function drawGameStatus() {\n        gameStatus.textContent = world.game_status_text();\n        points.textContent = world.points().toString();\n    }\n    function paint() {\n        drawWorld();\n        drawSnake();\n        drawReward();\n        drawGameStatus();\n    }\n    function play() {\n        const status = world.game_status();\n        if (status === snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Won || status === snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Lost) {\n            gameControlBtn.classList.remove(\"playing\");\n            gameControlBtn.textContent = \"Restart\";\n            return;\n        }\n        const fps = 8;\n        setTimeout(() => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            const command = commandStack.shift();\n            if (command === snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Up ||\n                command === snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Down ||\n                command === snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Left ||\n                command === snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Right) {\n                world.update_snake_direction(command);\n            }\n            world.step();\n            paint();\n            // requesting the update function before next animation frame and the repaint to be smooth\n            requestAnimationFrame(play);\n        }, 1000 / fps);\n    }\n    paint();\n});\n\n\n//# sourceURL=webpack://snake_game/./src/index.ts?");

/***/ }),

/***/ "./utils/rnd.js":
/*!**********************!*\
  !*** ./utils/rnd.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rnd\": () => (/* binding */ rnd)\n/* harmony export */ });\nfunction rnd(max) {\n  return Math.floor(Math.random() * max);\n}\n\n\n//# sourceURL=webpack://snake_game/./utils/rnd.js?");

/***/ }),

/***/ "../pkg/Rust_snake_game_bg.wasm":
/*!**************************************!*\
  !*** ../pkg/Rust_snake_game_bg.wasm ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"8718b98f940c075de652.wasm\";\n\n//# sourceURL=webpack://snake_game/../pkg/Rust_snake_game_bg.wasm?");

/***/ })

}]);